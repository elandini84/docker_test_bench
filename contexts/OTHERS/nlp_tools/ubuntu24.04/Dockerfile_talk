ARG base_img="ubuntu:24.04"
FROM $base_img
LABEL maintainer="Ettore Landini"

ARG yarp_version="master"
ARG user_name="yarp-user"
ARG robot_code="/usr/local/src/robot"
ARG llm_branch="master"
ARG uid="1000"
ARG gid="1000"
ARG google_cloud_version="tags/2025.01.13"
ARG tour_branch="jazzy"

# Non-interactive installation mode
ENV DEBIAN_FRONTEND=noninteractive
ENV DOCKER_UPDATED_ON=12_04_2024

# Install essentials
RUN apt-get update && apt-get install -y apt-utils \
    software-properties-common sudo psmisc lsb-release \
    protobuf-compiler libatlas-base-dev tmux nano geany \
    vim wget curl build-essential git gitk cmake cmake-curses-gui \
    autoconf xserver-xorg-video-dummy xserver-xorg-legacy \
    net-tools terminator libjpeg-dev ffmpeg apt-transport-https \
    ca-certificates gnupg libace-dev ycm-cmake-modules locales \
    curl zip unzip tar python3-setuptools python3-pip iproute2 \
    python3-tornado lsof iftop iputils-ping gdb bash-completion \
    btop && \
    rm -rf /var/lib/apt/lists/*

RUN sed -i 's/allowed_users=console/allowed_users=anybody/' /etc/X11/Xwrapper.config
COPY ./common/xorg.conf /etc/X11/xorg.conf

# Install yarp dependencies
RUN apt-get update && apt-get install -y libode8 libace-dev libboost-filesystem-dev libboost-system-dev \
    libboost-thread-dev libc6 python3 libgsl0-dev libncurses5-dev libsdl1.2-dev subversion git gfortran \
    libxmu-dev libode-dev wget unzip qtbase5-dev qtdeclarative5-dev qtmultimedia5-dev libqt5svg5 \
    libqt5opengl5-dev libopencv-dev freeglut3-dev libtinyxml-dev libblas-dev coinor-libipopt-dev \
    liblapack-dev libmumps-dev qml-module-qtmultimedia qml-module-qtquick-dialogs qml-module-qtquick-controls \
    qml-module-qt-labs-settings libqcustomplot-dev qml-module-qt-labs-folderlistmodel libedit-dev \
    libeigen3-dev libjpeg-dev libsimbody-dev libxml2-dev libjs-underscore portaudio19-dev libgtkmm-2.4-dev \
    libi2c-dev libv4l-dev libsqlite3-0 libsqlite3-dev

# Create user: ${user_name}
USER root
RUN useradd -l -u 33334 -G sudo -md /home/${user_name} -s /bin/bash -p ${user_name} ${user_name} && \
    # passwordless sudo for users in the 'sudo' group
    sed -i.bkp -e 's/%sudo\s\+ALL=(ALL\(:ALL\)\?)\s\+ALL/%sudo ALL=NOPASSWD:ALL/g' /etc/sudoers

# Set ENV
USER ${user_name}
RUN sudo mkdir ${robot_code}
ENV robotology_install_user ${user_name}
ENV yarp_user_home /home/$robotology_install_user
ENV robotology_install_folder ${robot_code}
RUN sudo chown -R ${robotology_install_user}:${robotology_install_user} ${robotology_install_folder}

# Miniforge installation TEST
USER ${robotology_install_user}
WORKDIR ${yarp_user_home}
RUN wget "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh"
RUN /bin/bash -c "bash ${yarp_user_home}/Miniforge3-$(uname)-$(uname -m).sh -b"
RUN ${yarp_user_home}/miniforge3/bin/conda init
RUN /bin/bash -c "source ${yarp_user_home}/miniforge3/etc/profile.d/conda.sh && \
    conda create -y -n openwakeword python=3.11 && \
    conda clean -afy"
RUN /bin/bash -c "source ${yarp_user_home}/miniforge3/etc/profile.d/conda.sh && \
    conda activate openwakeword && \
    pip install numpy bpytop openwakeword ipython && \
    conda clean -afy"


# FOLDER ACCESS ###############################################################################

USER root
RUN groupmod -g ${gid} ${user_name} && \
    usermod -u ${uid} -g ${gid} -G adm,users,sudo,root ${user_name} && \
    find / -uid 33334 -exec chown -h ${uid} '{}' \; 2> /dev/null || true && \
    find / -gid 33334 -exec chgrp ${gid} '{}' \; 2> /dev/null || true && \
    chown -R ${user_name}: /home/${user_name} && \
    mkdir -p /run/user/${uid} && \
    chown ${user_name}: /run/user/${uid} && \
    chmod 700 /run/user/${uid} && \
    mkdir -p /run/user/${uid}/dconf && \
    chown ${user_name}: /run/user/${uid}/dconf && \
    chmod 700 /run/user/${uid}/dconf && \
    mkdir -p /home/${user_name}/.ros && \
    mkdir -p /home/${user_name}/.config/yarp && \
    mkdir -p /home/${user_name}/.local/share/yarp && \
    chown -R ${user_name}: /home/${user_name}/

###############################################################################################


# Build ycm
USER $robotology_install_user
WORKDIR $robotology_install_folder
RUN git clone https://github.com/robotology/ycm.git -b master
RUN cd ycm && mkdir build && cd build && \
    cmake .. \
    -DCMAKE_BUILD_TYPE=Release && \
    make -j11
ENV YCM_DIR=${robot_code}/ycm/build

# Build YARP
USER $robotology_install_user
WORKDIR $robotology_install_folder
RUN git clone https://github.com/robotology/yarp.git -b $yarp_version
RUN cd yarp && mkdir build && cd build && \
    cmake .. \
    -DCMAKE_BUILD_TYPE=Release \
    -DYARP_COMPILE_libYARP_math=ON \
    -DYARP_COMPILE_GUIS=ON \
    -DYARP_COMPILE_DEVICE_PLUGINS=ON \
    -DENABLE_yarpcar_mjpeg=ON \
    -DENABLE_yarpcar_human=ON \
    -DENABLE_yarpcar_segmentationimage=ON \
    -DENABLE_yarpcar_portmonitor=ON \
    -DENABLE_yarpmod_portaudio=ON \
    -DENABLE_yarpmod_portaudioPlayer=ON \
    -DENABLE_yarpmod_portaudioRecorder=ON \
    -DENABLE_yarpmod_fakeBattery=ON  \
    -DENABLE_yarpmod_controlboardwrapper2=ON \
    -DENABLE_yarpmod_laserFromDepth=ON \
    -DENABLE_yarpmod_laserFromExternalPort=ON \
    -DENABLE_yarpmod_laserFromDepth=ON \
    -DENABLE_yarpmod_laserFromPointCloud=ON \
    -DENABLE_yarpmod_laserFromRosTopic=ON \
    -DENABLE_yarppm_soundfilter_resample=ON \
    -DENABLE_yarppm_bottle_compression_zlib=ON \
    -DENABLE_yarppm_depthimage_compression_zlib=ON \
    -DENABLE_yarppm_image_compression_ffmpeg=ON \
    -DENABLE_yarppm_depthimage_to_mono=ON \
    -DENABLE_yarppm_depthimage_to_rgb=ON && \
    make -j11 && cmake .. -DALLOW_IDL_GENERATION=ON && \
    make -j11 && cmake .. -DALLOW_IDL_GENERATION=OFF
ENV YARP_ROOT=$robotology_install_folder/yarp
ENV YARP_DIR=$robotology_install_folder/yarp/build

# SWIG 4.21
WORKDIR ${yarp_user_home}
RUN sudo apt-get purge -y swig && mkdir Downloads && cd Downloads &&\
    wget -nv https://github.com/robotology/robotology-vcpkg-ports/releases/download/storage/swig_4_2_1_ubuntu_24_04.zip && \
    unzip -q swig_4_2_1_ubuntu_24_04.zip && \
    sudo mv swig_4_2_1_ubuntu_24_04_install/bin/* /usr/bin && \
    sudo mv swig_4_2_1_ubuntu_24_04_install/share/swig /usr/share

# YARP bindings
USER ${robotology_install_user}
WORKDIR ${robotology_install_folder}
RUN cd yarp && cd bindings &&  mkdir build && cd build && \
    cmake .. -DCREATE_PYTHON=ON -DSWIG_EXECUTABLE=/usr/bin/swig -DSWIG_DIR=/usr/share/swig/4.2.1 && make -j11

# Install YARP completion
RUN sudo ln -s /usr/local/share/bash-completion/completions/yarp /usr/share/bash-completion/completions

# Set environmental variables
USER $robotology_install_user
RUN echo "PS1='\[\e]0;\u \w\a\]\[\033[01;32m\]\u\[\033[00m\] \[\033[01;34m\]\w\[\033[00m\] \$ '" >> /home/$robotology_install_user/.bashrc
ENV PATH=$PATH:$YARP_DIR/bin
ENV DISPLAY=:1
ENV YARP_DATA_DIRS=$YARP_DIR/share/yarp
ENV LD_LIBRARY_PATH=$robotology_install_folder/yarp/build/lib/yarp/
ENV YARP_COLORED_OUTPUT=1
ENV QT_X11_NO_MITSHM=1
ENV PYTHONPATH=$PYTHONPATH:${YARP_ROOT}/bindings/build/lib/python3/

# Manage yarp port
EXPOSE 10000/tcp 10000/udp

USER ${user_name}
WORKDIR /home/${user_name}/

### Install google from vcpkg ############################################# START ####
WORKDIR /home/${user_name}/Downloads
RUN git clone https://github.com/Microsoft/vcpkg.git && \
    cd vcpkg && git checkout ${google_cloud_version} && ./bootstrap-vcpkg.sh -disableMetrics && \
    ./vcpkg install --clean-after-build google-cloud-cpp[texttospeech] google-cloud-cpp[speech] google-cloud-cpp[dialogflow-cx]
ENV VCPKG_ROOT=/home/${user_name}/Downloads/vcpkg
### Packaging google-cloud-cpp instructions ############################################### END ####

ENV GOOGLE_APPLICATION_CREDENTIALS=/home/${user_name}/.config/google-credential/hsp_google.json
ENV BUILD_SUFFIX=build

WORKDIR ${robot_code}
RUN git clone https://github.com/robotology/yarp-devices-google-cloud && \
   cd yarp-devices-google-cloud && cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE=/home/yarp-user/Downloads/vcpkg/scripts/buildsystems/vcpkg.cmake && \
   cmake --build build
ENV YARP_DATA_DIRS=${YARP_DATA_DIRS}:${robot_code}/yarp-devices-google-cloud/build/share/yarp:${robot_code}/yarp-devices-google-cloud/build/share/

WORKDIR /home/${user_name}/Downloads
# Install openai c++ dependencies
RUN cd vcpkg && ./vcpkg install nlohmann-json

    # Install openai c++ community library
RUN git clone https://github.com/D7EAD/liboai.git && \
    cd liboai && cd liboai && \
    cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE=/home/${user_name}/Downloads/vcpkg/scripts/buildsystems/vcpkg.cmake \
    -DCMAKE_POSITION_INDEPENDENT_CODE=true && \
    cd build && make -j8 && sudo make install

# Configure openai credentials
RUN echo "set -a" >> /home/${user_name}/.bashrc && \
    echo "source ~/.env/config.env" >> /home/${user_name}/.bashrc && \
    echo "set +a" >> /home/${user_name}/.bashrc

# Install yarpGPT
WORKDIR ${robot_code}
RUN git clone https://github.com/robotology/yarp-devices-llm -b ${llm_branch} && \
    cd yarp-devices-llm && mkdir build && \
    cmake -B build -S . \
    -DCMAKE_TOOLCHAIN_FILE=/home/${user_name}/Downloads/vcpkg/scripts/buildsystems/vcpkg.cmake \
    -DLIBOAI_INSTALL_PATH=/home/${user_name}/Downloads/liboai && cd build && \
    make -j8
ENV YARP_DEVICES_LLM_DIR=${robot_code}/yarp-devices-llm/build
ENV YARP_DATA_DIRS=${YARP_DATA_DIRS}:${YARP_DEVICES_LLM_DIR}/share/yarp:${YARP_DEVICES_LLM_DIR}/share
ENV PATH=$PATH:${YARP_DEVICES_LLM_DIR}/bin

# Set up ONNX Runtime
WORKDIR ${robotology_install_folder}
RUN wget https://github.com/microsoft/onnxruntime/releases/download/v1.20.1/onnxruntime-linux-x64-1.20.1.tgz
RUN tar -xvzf onnxruntime-linux-x64-1.20.1.tgz
ENV ONNX_PATH=${robotology_install_folder}/onnxruntime-linux-x64-1.20.1

#SileroVAD
WORKDIR ${robotology_install_folder}
RUN git clone https://github.com/snakers4/silero-vad

RUN git clone https://github.com/hsp-iit/tour-guide-robot -b $tour_branch
RUN /bin/bash -c "export ONNX_PATH=${robotology_install_folder}/onnxruntime-linux-x64-1.20.1; cd tour-guide-robot; mkdir build; cd build; cmake .. -DCMAKE_BUILD_TYPE=Release -DBTState=OFF -DENABLE_faceExpressionImage=ON -DSILERO_VAD=ON; make -j11"

ENV TOUR_GUIDE_ROBOT_SOURCE_DIR=${robot_code}/tour-guide-robot
ENV YARP_DATA_DIRS=${YARP_DATA_DIRS}:${TOUR_GUIDE_ROBOT_SOURCE_DIR}/build/share/tour-guide-robot
ENV PATH=${PATH}:${TOUR_GUIDE_ROBOT_SOURCE_DIR}/build/bin

RUN echo "conda activate openwakeword" >> /home/${user_name}/.bashrc
WORKDIR ${yarp_user_home}
CMD bash && conda activate openwakeword